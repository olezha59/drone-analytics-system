import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';
import { Card, Alert, List, Typography, Tag, Spin } from 'antd';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Region, RegionStats } from '../../types/region';
import { analyticsAPI } from '../../services/api';

const { Title, Text } = Typography;

const CENTER_RUSSIA: [number, number] = [65, 90];
const ZOOM_LEVEL = 3;

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const getColorByFlights = (flights: number) => {
  if (flights === 0) return '#f0f0f0'; // –Ω–µ—Ç –ø–æ–ª–µ—Ç–æ–≤
  if (flights > 1000) return '#ff4d4f'; // –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (flights > 500) return '#faad14';  // —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (flights > 100) return '#52c41a';  // –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  return '#91d5ff';                     // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
};

const RussiaMap: React.FC = () => {
  const [selectedRegionId, setSelectedRegionId] = useState<number | null>(null);
  const [regionStats, setRegionStats] = useState<RegionStats | null>(null);
  const [heatmapData, setHeatmapData] = useState<HeatmapData[]>([]); 
  const [loading, setLoading] = useState(true);
  const [geoJsonData, setGeoJsonData] = useState<any>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const [heatmapData, geoData] = await Promise.all([
  	  analyticsAPI.getHeatmapData(),
  	  analyticsAPI.getRegionGeoJSON()
   	]);
	setHeatmapData(heatmapData);
	setGeoJsonData(geoData);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        // Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –≥–æ—Ç–æ–≤
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
  useEffect(() => {
    if (selectedRegion) {
      setRegionStats(null);
      analyticsAPI.getRegionStats(selectedRegion.id)
        .then(setRegionStats)
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞:', error);
        });
    }
  }, [selectedRegion]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
  const getFlightCountForRegion = (regionId: number): number => {
   const regionData = heatmapData.find(item => item.regionId === regionId);
   return regionData ? regionData.flightCount : 0;
};
  // –°—Ç–∏–ª–∏ –¥–ª—è GeoJSON –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const geoJsonStyle = (feature: any) => {
    const regionId = feature.properties.id;
    const flightCount = getFlightCountForRegion(regionId);
    const isSelected = selectedRegion?.id === regionId;

    return {
      fillColor: getColorByFlights(flightCount),
      weight: isSelected ? 3 : 1,
      color: isSelected ? '#1890ff' : '#333',
      fillOpacity: isSelected ? 0.8 : 0.6,
    };
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –Ω–∞ –∫–∞—Ä—Ç–µ
  const onEachRegion = (feature: any, layer: any) => {
    const regionId = feature.id; 
    const regionName = feature.properties.name;
    const flightCount = getFlightCountForRegion(regionId);

    layer.bindTooltip(`
      <div style="font-weight: bold;">${regionName}</div>
      <div>–ü–æ–ª—ë—Ç–æ–≤: ${flightCount}</div>
      <div>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</div>
    `);

    layer.on('click', () => {
      const region = regions.find(r => r.id === regionId);
      if (region) {
        setSelectedRegion(region);
      }
    });
  };

  if (loading) {
    return (
      <Card title="üó∫Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–§" style={{ marginTop: '24px' }}>
        <div style={{ textAlign: 'center', padding: '50px' }}>
          <Spin size="large" />
          <div style={{ marginTop: '16px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
      </Card>
    );
  }

  return (
    <Card title="üó∫Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê (–¥–∞–Ω–Ω—ã–µ –∏–∑ flight_records)" style={{ marginTop: '24px' }}>
      <div style={{ display: 'flex', gap: '20px', minHeight: '600px' }}>
        {/* –ö–∞—Ä—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ */}
        <div style={{ flex: 3, position: 'relative', borderRadius: '8px', overflow: 'hidden' }}>
          <MapContainer
            center={CENTER_RUSSIA}
            zoom={ZOOM_LEVEL}
            style={{ height: '100%', width: '100%' }}
            scrollWheelZoom={true}
          >
            <TileLayer
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              attribution='&copy; OpenStreetMap contributors'
            />
            
            {/* –†–µ–∞–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ GeoJSON */}
            {geoJsonData && (
              <GeoJSON
                data={geoJsonData}
                style={geoJsonStyle}
                onEachFeature={onEachRegion}
              />
            )}
          </MapContainer>

          {/* –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ */}
          <div style={{ 
            position: 'absolute', 
            top: '10px', 
            left: '10px', 
            background: 'rgba(255,255,255,0.95)',
            padding: '15px',
            borderRadius: '8px',
            maxWidth: '300px',
            maxHeight: '400px',
            overflowY: 'auto'
          }}>
            <Text strong>–†–µ–≥–∏–æ–Ω—ã –†–§ (–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î):</Text>
            <List
              size="small"
              dataSource={regions}
              renderItem={(region) => {
                const flightCount = getFlightCountForRegion(region.id);
                return (
                  <List.Item 
                    style={{ 
                      cursor: 'pointer',
                      background: selectedRegion?.id === region.id ? '#e6f7ff' : 'transparent',
                      padding: '8px'
                    }}
                    onClick={() => setSelectedRegion(region)}
                  >
                    <List.Item.Meta
                      title={region.name}
                      description={
                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                          <div 
                            style={{ 
                              width: '12px', 
                              height: '12px', 
                              background: getColorByFlights(flightCount),
                              borderRadius: '2px'
                            }} 
                          />
                          <span>{flightCount} –ø–æ–ª—ë—Ç–æ–≤</span>
                        </div>
                      }
                    />
                  </List.Item>
                );
              }}
            />
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ */}
        <div style={{ flex: 2, minWidth: '300px' }}>
          {selectedRegion && regionStats ? (
            <Card 
              title={`üìä ${selectedRegion.name}`}
              extra={
                <Tag color={getColorByFlights(regionStats.flightCount)}>
                  {regionStats.flightCount > 1000 ? '–í—ã—Å–æ–∫–∞—è' : 
                   regionStats.flightCount > 500 ? '–°—Ä–µ–¥–Ω—è—è' : 
                   regionStats.flightCount > 100 ? '–ù–∏–∑–∫–∞—è' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è'} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                </Tag>
              }
            >
              <List size="small">
                <List.Item>
                  <List.Item.Meta 
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—ë—Ç–æ–≤" 
                    description={<Text strong>{regionStats.flightCount.toLocaleString()}</Text>} 
                  />
                </List.Item>
                <List.Item>
                  <List.Item.Meta 
                    title="–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤" 
                    description={regionStats.operatorCount} 
                  />
                </List.Item>
                <List.Item>
                  <List.Item.Meta 
                    title="–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" 
                    description={`${regionStats.avgDuration} –º–∏–Ω`} 
                  />
                </List.Item>
                <List.Item>
                  <List.Item.Meta 
                    title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–æ–≤" 
                    description={`${regionStats.flightDensity} –Ω–∞ 1000 –∫–º¬≤`} 
                  />
                </List.Item>
                <List.Item>
                  <List.Item.Meta 
                    title="–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞" 
                    description={`${regionStats.peakLoad} –ø–æ–ª—ë—Ç–æ–≤/—á–∞—Å`} 
                  />
                </List.Item>
                <List.Item>
                  <List.Item.Meta 
                    title="–î–Ω–µ–π –±–µ–∑ –ø–æ–ª—ë—Ç–æ–≤" 
                    description={regionStats.zeroDays} 
                  />
                </List.Item>
              </List>

              <div style={{ marginTop: '16px' }}>
                <Text strong>–°—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</Text>
                <div style={{ marginTop: '8px' }}>
                  <div>–£—Ç—Ä–æ (6-12): {regionStats.dailyActivity.morning}%</div>
                  <div>–î–µ–Ω—å (12-18): {regionStats.dailyActivity.day}%</div>
                  <div>–í–µ—á–µ—Ä (18-24): {regionStats.dailyActivity.evening}%</div>
                  <div>–ù–æ—á—å (0-6): {regionStats.dailyActivity.night}%</div>
                </div>
              </div>
            </Card>
          ) : (
            <Card title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏–æ–Ω–µ">
              <div style={{ textAlign: 'center', padding: '20px' }}>
                <Text type="secondary">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</Text>
                <div style={{ marginTop: '16px' }}>
                  <Alert 
                    message="–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö flight_records" 
                    type="info" 
                  />
                </div>
              </div>
            </Card>
          )}
        </div>
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div style={{ marginTop: '16px', padding: '16px', background: '#f5f5f5', borderRadius: '6px' }}>
        <Text strong>–õ–µ–≥–µ–Ω–¥–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–¥–∞–Ω–Ω—ã–µ –∏–∑ flight_records):</Text>
        <div style={{ display: 'flex', gap: '15px', alignItems: 'center', marginTop: '8px', flexWrap: 'wrap' }}>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <div style={{ width: '20px', height: '20px', background: '#ff4d4f', borderRadius: '2px' }}></div>
            <span>–í—ã—Å–æ–∫–∞—è (1000+ –ø–æ–ª—ë—Ç–æ–≤)</span>
          </div>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <div style={{ width: '20px', height: '20px', background: '#faad14', borderRadius: '2px' }}></div>
            <span>–°—Ä–µ–¥–Ω—è—è (500-1000)</span>
          </div>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <div style={{ width: '20px', height: '20px', background: '#52c41a', borderRadius: '2px' }}></div>
            <span>–ù–∏–∑–∫–∞—è (100-500)</span>
          </div>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <div style={{ width: '20px', height: '20px', background: '#91d5ff', borderRadius: '2px' }}></div>
            <span>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (1-100)</span>
          </div>
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <div style={{ width: '20px', height: '20px', background: '#f0f0f0', borderRadius: '2px' }}></div>
            <span>–ù–µ—Ç –ø–æ–ª—ë—Ç–æ–≤</span>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default RussiaMap;
