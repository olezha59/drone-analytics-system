// frontend/src/components/Map/RegionsSidebar.tsx
import React, { useState } from 'react';
import './RegionsSidebar.css';

interface RegionItem {
  id: number;
  name: string;
  totalFlights: number;
  normalizedValue: number;
  color: string;
}

interface RegionsSidebarProps {
  regions: RegionItem[];
  selectedRegionId: number | null;
  onRegionSelect: (regionId: number) => void;
  onRegionHover: (regionId: number) => void;
  onRegionLeave: () => void;
}

const RegionsSidebar: React.FC<RegionsSidebarProps> = ({
  regions,
  selectedRegionId,
  onRegionSelect,
  onRegionHover,
  onRegionLeave
}) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ—Ç–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
  const sortedRegions = [...regions].sort((a, b) => b.totalFlights - a.totalFlights);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredRegions = sortedRegions.filter(region =>
    region.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (isCollapsed) {
    return (
      <div className="regions-sidebar collapsed">
        <button 
          className="toggle-btn"
          onClick={() => setIsCollapsed(false)}
          title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤"
        >
          üìã
        </button>
      </div>
    );
  }

  return (
    <div className="regions-sidebar">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–µ—Ä–Ω—É—Ç—å */}
      <div className="sidebar-header">
        <h3>üìç –†–µ–≥–∏–æ–Ω—ã –†–§</h3>
        <button 
          className="toggle-btn"
          onClick={() => setIsCollapsed(true)}
          title="–°–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫"
        >
          ‚úï
        </button>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="search-container">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="sidebar-stats">
        <div className="stat-item">
          <span>–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:</span>
          <span className="stat-value">{regions.length}</span>
        </div>
        <div className="stat-item">
          <span>–° –¥–∞–Ω–Ω—ã–º–∏:</span>
          <span className="stat-value">
            {regions.filter(r => r.totalFlights > 0).length}
          </span>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ */}
      <div className="regions-list">
        <div className="list-header">
          <span>–†–µ–≥–∏–æ–Ω</span>
          <span>–ü–æ–ª–µ—Ç–æ–≤</span>
        </div>
        <div className="regions-scrollable">
          {filteredRegions.map(region => (
            <div
              key={region.id}
              className={`region-item ${
                selectedRegionId === region.id ? 'selected' : ''
              } ${region.totalFlights === 0 ? 'no-data' : ''}`}
              onClick={() => onRegionSelect(region.id)}
              onMouseEnter={() => onRegionHover(region.id)}
              onMouseLeave={onRegionLeave}
            >
              <div className="region-info">
                <div 
                  className="region-color"
                  style={{ backgroundColor: region.color }}
                />
                <span className="region-name">{region.name}</span>
              </div>
              <div className="region-flights">
                {region.totalFlights > 0 ? region.totalFlights.toLocaleString() : '‚Äî'}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="sidebar-hint">
        üñ±Ô∏è –ù–∞–≤–æ–¥–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
      </div>
    </div>
  );
};

export default RegionsSidebar;
