package com.droneanalytics.backend.service;

import com.droneanalytics.backend.entity.FlightRecord;
import com.droneanalytics.backend.repository.FlightRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class FlightService {

    @Autowired
    private FlightRecordRepository flightRecordRepository;

    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ—Ç—ã –ø–æ center_code
     */
    public List<FlightRecord> getFlightsByCenterCode(String centerCode) {
        return flightRecordRepository.findByCenterCode(centerCode);
    }



    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    public Page<FlightRecord> getAllFlights(Pageable pageable) {
        return flightRecordRepository.findAll(pageable);
    }

    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç –ø–æ ID
     */
    public Optional<FlightRecord> getFlightById(UUID id) {
        return flightRecordRepository.findById(id);
    }

    /**
     * üìå –ü–æ–∏—Å–∫ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)
     */
    public List<FlightRecord> searchFlights(String operator, String region, 
                                           LocalDate dateFrom, LocalDate dateTo) {
        
        // ‚úÖ –ù–ê–ß–ò–ù–ê–ï–ú –°–û –í–°–ï–• –ó–ê–ü–ò–°–ï–ô
        List<FlightRecord> result = flightRecordRepository.findAll();
        
        // üìã –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –û–ü–ï–†–ê–¢–û–†–£
        if (operator != null && !operator.trim().isEmpty()) {
            result = result.stream()
                          .filter(flight -> operator.equalsIgnoreCase(flight.getOperatorName()))
                          .collect(Collectors.toList());
        }
        
        // üó∫Ô∏è –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –†–ï–ì–ò–û–ù–£
        if (region != null && !region.trim().isEmpty()) {
            result = result.stream()
                          .filter(flight -> region.equalsIgnoreCase(flight.getRegionTakeoff()))
                          .collect(Collectors.toList());
        }
        
        // üìÖ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –î–ê–¢–ï
        if (dateFrom != null && dateTo != null) {
            result = result.stream()
                          .filter(flight -> flight.getFlightDate() != null)
                          .filter(flight -> !flight.getFlightDate().isBefore(dateFrom) && 
                                           !flight.getFlightDate().isAfter(dateTo))
                          .collect(Collectors.toList());
        }
        
        return result;
    }

    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
     */
    public List<FlightRecord> getFlightsByOperator(String operatorName) {
        return flightRecordRepository.findByOperatorName(operatorName);
    }

    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ
     */
    public List<FlightRecord> getFlightsByRegion(String regionName) {
        return flightRecordRepository.findByRegionTakeoff(regionName);
    }

    /**
     * üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª–µ—Ç
     */
    public FlightRecord saveFlight(FlightRecord flight) {
        return flightRecordRepository.save(flight);
    }

    /**
     * üìå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ—Ç
     */
    public void deleteFlight(UUID id) {
        flightRecordRepository.deleteById(id);
    }

    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    public List<String> getUniqueOperators() {
        return flightRecordRepository.findDistinctOperators();
    }

    /**
     * üìå –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public List<FlightRecord> getFlightsByDateRange(LocalDate start, LocalDate end) {
        return flightRecordRepository.findByFlightDateBetween(start, end);
    }
}