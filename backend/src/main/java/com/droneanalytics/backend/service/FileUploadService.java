package com.droneanalytics.backend.service;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@Service
public class FileUploadService {

    private final String UPLOAD_DIR = "uploads";

    public String processExcelFile(MultipartFile file) throws IOException, InterruptedException {
        System.out.println("üìÅ Starting file processing...");
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path uploadPath = Paths.get(UPLOAD_DIR);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
            System.out.println("‚úÖ Created upload directory: " + uploadPath.toAbsolutePath());
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path filePath = uploadPath.resolve(fileName);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

        System.out.println("‚úÖ File saved: " + filePath.toAbsolutePath());
        System.out.println("üêç Starting Python parser...");

        // –ó–∞–ø—É—Å–∫–∞–µ–º Python –ø–∞—Ä—Å–µ—Ä
        return runPythonParser(filePath.toAbsolutePath().toString());
    }

    private String runPythonParser(String excelFilePath) throws IOException, InterruptedException {
        try {
            // –ò—â–µ–º Python —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö
            String[] possiblePaths = {
                "parser_vscode.py",                    // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                "../parser_vscode.py",                 // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è  
                "../../parser_vscode.py",              // –ù–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ
                "backend/parser_vscode.py",            // –í –ø–∞–ø–∫–µ backend
                "../backend/parser_vscode.py"          // –í –ø–∞–ø–∫–µ backend –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
            };
            
            File pythonScript = null;
            for (String path : possiblePaths) {
                File candidate = new File(path);
                System.out.println("üîç Checking: " + candidate.getAbsolutePath());
                if (candidate.exists()) {
                    pythonScript = candidate;
                    System.out.println("‚úÖ Found Python script at: " + pythonScript.getAbsolutePath());
                    break;
                }
            }
            
            if (pythonScript == null) {
                throw new IOException("Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏: " + String.join(", ", possiblePaths));
            }

            System.out.println("üöÄ Executing: python3 " + pythonScript.getAbsolutePath() + " --file " + excelFilePath);

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Å–∫—Ä–∏–ø—Ç–∞
            ProcessBuilder processBuilder = new ProcessBuilder(
                "python3", 
                pythonScript.getAbsolutePath(),
                "--file",
                excelFilePath
            );

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            processBuilder.directory(new File("."));
            
            // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            processBuilder.redirectErrorStream(true);
            processBuilder.inheritIO();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            Process process = processBuilder.start();
            System.out.println("‚è≥ Waiting for Python script to complete...");
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º (10 –º–∏–Ω—É—Ç)
            boolean finished = process.waitFor(10, java.util.concurrent.TimeUnit.MINUTES);
            
            if (!finished) {
                process.destroy();
                throw new IOException("Python —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)");
            }
            
            int exitCode = process.exitValue();
            System.out.println("üêç Python script finished with exit code: " + exitCode);
            
            if (exitCode == 0) {
                return "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö";
            } else {
                throw new IOException("Python —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥: " + exitCode);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Python script execution failed: " + e.getMessage());
            e.printStackTrace();
            throw new IOException("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø–∞—Ä—Å–µ—Ä–∞: " + e.getMessage(), e);
        }
    }
}
