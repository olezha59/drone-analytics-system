package com.droneanalytics.backend.controller;

import com.droneanalytics.backend.entity.RussianRegion;
import com.droneanalytics.backend.service.RegionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/regions")
@CrossOrigin(origins = "http://localhost:3000")
public class RegionController {
    
    @Autowired
    private RegionService regionService;
    
    /**
     * üìå GET /api/regions - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping
    public ResponseEntity<List<Map<String, Object>>> getAllRegions() {
        try {
            List<RussianRegion> regions = regionService.getAllRegions();
            
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            List<Map<String, Object>> result = new ArrayList<>();
            
            for (RussianRegion region : regions) {
                Map<String, Object> regionData = new HashMap<>();
                regionData.put("id", region.getGid());
                regionData.put("name", region.getName());
                regionData.put("regionType", region.getRegionType());
                regionData.put("isoCode", region.getIsoCode());
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º geom - –æ–Ω —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –¥–ª—è JSON
                
                result.add(regionData);
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –î–ï–ú–û-–î–ê–ù–ù–´–ï –ï–°–õ–ò –û–®–ò–ë–ö–ê
            return ResponseEntity.ok(getDemoRegions());
        }
    }
    
    /**
     * üìå –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private List<Map<String, Object>> getDemoRegions() {
        List<Map<String, Object>> demoRegions = new ArrayList<>();
        
        String[][] demoData = {
            {"1", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-MOS"},
            {"2", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ì–æ—Ä–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "RU-SPE"},
            {"3", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "–ö—Ä–∞–π", "RU-KDA"},
            {"4", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", "–†–µ—Å–ø—É–±–ª–∏–∫–∞", "RU-TA"},
            {"5", "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-SVE"}
        };
        
        for (String[] data : demoData) {
            Map<String, Object> region = new HashMap<>();
            region.put("gid", Long.parseLong(data[0]));
            region.put("name", data[1]);
            region.put("regionType", data[2]);
            region.put("isoCode", data[3]);
            demoRegions.add(region);
        }
        
        return demoRegions;
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @GetMapping("/{id}")
    public ResponseEntity<RussianRegion> getRegionById(@PathVariable Long id) {
        Optional<RussianRegion> region = regionService.getRegionById(id);
        return region.map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
    }
    
    @GetMapping("/name/{name}")
    public ResponseEntity<RussianRegion> getRegionByName(@PathVariable String name) {
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        return region.map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
    }
}