package com.droneanalytics.backend.controller;

import com.droneanalytics.backend.dto.FlightWithRegionDto;
import com.droneanalytics.backend.entity.FlightRecord;
import com.droneanalytics.backend.entity.RussianRegion;
import com.droneanalytics.backend.service.FlightService;
import com.droneanalytics.backend.service.RegionMappingService;
import com.droneanalytics.backend.service.RegionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.Duration;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/regions")
@CrossOrigin(origins = "http://localhost:3000")
public class RegionController {
    
    @Autowired
    private RegionService regionService;
    
    @Autowired
    private FlightService flightService;
    
    @Autowired 
    private RegionMappingService regionMappingService;
    
    /**
     * üìå GET /api/regions - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<List<Map<String, Object>>> getAllRegions() {
        try {
            List<RussianRegion> regions = regionService.getAllRegions();
            
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            List<Map<String, Object>> result = new ArrayList<>();
            
            for (RussianRegion region : regions) {
                Map<String, Object> regionData = new HashMap<>();
                regionData.put("id", region.getGid());
                regionData.put("name", region.getName());
                regionData.put("regionType", region.getRegionType());
                regionData.put("isoCode", region.getIsoCode());
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º geom - –æ–Ω —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –¥–ª—è JSON
                
                result.add(regionData);
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –î–ï–ú–û-–î–ê–ù–ù–´–ï –ï–°–õ–ò –û–®–ò–ë–ö–ê
            return ResponseEntity.ok(getDemoRegions());
        }
    }
    
    /**
     * üìå GET /api/regions/{id} - –†–ï–ì–ò–û–ù –ü–û ID –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<Map<String, Object>> getRegionById(@PathVariable Long id) {
        Optional<RussianRegion> region = regionService.getRegionById(id);
        
        if (region.isPresent()) {
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            Map<String, Object> regionData = new HashMap<>();
            RussianRegion r = region.get();
            
            regionData.put("id", r.getGid());
            regionData.put("name", r.getName());
            regionData.put("regionType", r.getRegionType());
            regionData.put("isoCode", r.getIsoCode());
            // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º geom!
            
            return ResponseEntity.ok(regionData);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * üìå GET /api/regions/name/{name} - –†–ï–ì–ò–û–ù –ü–û –ù–ê–ó–í–ê–ù–ò–Æ –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping("/name/{name}")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<Map<String, Object>> getRegionByName(@PathVariable String name) {
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        
        if (region.isPresent()) {
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            Map<String, Object> regionData = new HashMap<>();
            RussianRegion r = region.get();
            
            regionData.put("id", r.getGid());
            regionData.put("name", r.getName());
            regionData.put("regionType", r.getRegionType());
            regionData.put("isoCode", r.getIsoCode());
            
            return ResponseEntity.ok(regionData);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * üìå GET /api/regions/{id}/flights
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ ID —Ä–µ–≥–∏–æ–Ω–∞ (—á–µ—Ä–µ–∑ center_code –º–∞–ø–ø–∏–Ω–≥)
     */
    @GetMapping("/{id}/flights")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<List<FlightWithRegionDto>> getFlightsByRegionId(@PathVariable Long id) {
        // –ù–∞–π—Ç–∏ –≤—Å–µ center_code, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É region_id
        List<String> centerCodesForRegion = regionMappingService.getCenterCodesByRegionId(id);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —ç—Ç–∏–º center_code
        List<FlightRecord> flights = new ArrayList<>();
        for (String centerCode : centerCodesForRegion) {
            flights.addAll(flightService.getFlightsByCenterCode(centerCode));
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DTO
        List<FlightWithRegionDto> flightDtos = flights.stream()
            .map(flight -> new FlightWithRegionDto(flight, regionMappingService))
            .collect(Collectors.toList());
        
        return ResponseEntity.ok(flightDtos);
    }
    
    /**
     * üìå GET /api/regions/name/{name}/flights  
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞ (—á–µ—Ä–µ–∑ center_code –º–∞–ø–ø–∏–Ω–≥)
     */
    @GetMapping("/name/{name}/flights")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<List<FlightWithRegionDto>> getFlightsByRegionName(@PathVariable String name) {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        if (region.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å ID —Ä–µ–≥–∏–æ–Ω–∞
        Long regionId = region.get().getGid();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ—Ç–æ–≤ –ø–æ ID
        return getFlightsByRegionId(regionId);
    }
    
    /**
     * üìå GET /api/regions/{id}/stats
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –ø–æ ID —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    @GetMapping("/{id}/stats")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<Map<String, Object>> getRegionStats(
            @PathVariable Long id,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        
        // –ù–∞–π—Ç–∏ –≤—Å–µ center_code, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É region_id
        List<String> centerCodesForRegion = regionMappingService.getCenterCodesByRegionId(id);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —ç—Ç–∏–º center_code
        List<FlightRecord> allFlights = new ArrayList<>();
        for (String centerCode : centerCodesForRegion) {
            allFlights.addAll(flightService.getFlightsByCenterCode(centerCode));
        }
        
        // üìÖ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –î–ê–¢–ê–ú –ï–°–õ–ò –£–ö–ê–ó–ê–ù–´
        List<FlightRecord> flights = filterFlightsByDate(allFlights, startDate, endDate);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Long totalFlights = (long) flights.size();
        Long uniqueOperators = flights.stream()
                .map(FlightRecord::getOperatorName)
                .filter(operator -> operator != null && !operator.isEmpty())
                .distinct()
                .count();
        
        // üìä –ù–û–í–´–ô –†–ê–°–ß–ï–¢: —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ takeoff_time –∏ landing_time
        Double averageDuration = calculateAverageFlightDuration(flights);
        
        // üÜï –î–ù–ï–í–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        Map<String, Long> dailyActivity = calculateDailyActivity(flights);
        
        // üÜï –ù–£–õ–ï–í–´–ï –î–ù–ò: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–∑ –ø–æ–ª–µ—Ç–æ–≤
        Long zeroDays = calculateZeroDays(flights, startDate, endDate);
        
        // üÜï –°–†–ï–î–ù–ï–°–£–¢–û–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê: —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø–æ–ª–µ—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
        Map<String, Object> averageDailyStats = calculateAverageDailyFlights(flights, startDate, endDate);
        
        // üÜï –†–û–°–¢-–ü–ê–î–ï–ù–ò–ï: –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–µ –¥–∞—Ç—ã)
        Map<String, Object> growthDeclineStats = calculateGrowthDecline(flights, startDate, endDate);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        Map<String, Long> flightsByOperator = flights.stream()
                .filter(flight -> flight.getOperatorName() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getOperatorName,
                    Collectors.counting()
                ));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤
        Map<String, Long> flightsByAircraftType = flights.stream()
                .filter(flight -> flight.getAircraftType() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getAircraftType,
                    Collectors.counting()
                ));
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        Map<String, Object> stats = new HashMap<>();
        stats.put("regionId", id);
        stats.put("totalFlights", totalFlights);
        stats.put("uniqueOperators", uniqueOperators);
        stats.put("averageFlightDuration", averageDuration);
        stats.put("dailyActivity", dailyActivity);
        stats.put("zeroDays", zeroDays);
        stats.put("averageDailyFlights", averageDailyStats); // üÜï –°–†–ï–î–ù–ï–°–£–¢–û–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê
        if (!growthDeclineStats.isEmpty()) {
            stats.put("growthDecline", growthDeclineStats); // üÜï –†–û–°–¢-–ü–ê–î–ï–ù–ò–ï (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
        }
        stats.put("centerCodes", centerCodesForRegion);
        stats.put("flightsByOperator", flightsByOperator);
        stats.put("flightsByAircraftType", flightsByAircraftType);
        
        // üìÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–ï–†–ò–û–î–ï
        if (startDate != null) {
            stats.put("startDate", startDate.toString());
        }
        if (endDate != null) {
            stats.put("endDate", endDate.toString());
        }
        stats.put("periodDescription", getPeriodDescription(startDate, endDate));
        
        return ResponseEntity.ok(stats);
    }
    
    /**
     * üìå GET /api/regions/name/{name}/stats
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    @GetMapping("/name/{name}/stats")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<Map<String, Object>> getRegionStatsByName(
            @PathVariable String name,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        if (region.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å ID —Ä–µ–≥–∏–æ–Ω–∞
        Long regionId = region.get().getGid();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ ID
        return getRegionStats(regionId, startDate, endDate);
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º
     */
    private List<FlightRecord> filterFlightsByDate(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        if (startDate == null && endDate == null) {
            return flights; // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        }
        
        return flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .filter(flight -> {
                    LocalDate flightDate = flight.getFlightDate();
                    boolean afterStart = (startDate == null) || !flightDate.isBefore(startDate);
                    boolean beforeEnd = (endDate == null) || !flightDate.isAfter(endDate);
                    return afterStart && beforeEnd;
                })
                .collect(Collectors.toList());
    }
    
    /**
     * üìå –ù–û–í–´–ô –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤
     * –∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É landing_time –∏ takeoff_time
     */
    private Double calculateAverageFlightDuration(List<FlightRecord> flights) {
        List<Long> durationsInMinutes = new ArrayList<>();
        
        for (FlightRecord flight : flights) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –≤—Ä–µ–º–µ–Ω
            if (flight.getTakeoffTime() == null || flight.getLandingTime() == null) {
                continue;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
            long durationMinutes = Duration.between(
                flight.getTakeoffTime(), 
                flight.getLandingTime()
            ).toMinutes();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (durationMinutes > 0) {
                durationsInMinutes.add(durationMinutes);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (durationsInMinutes.isEmpty()) {
            return null;
        }
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
        return durationsInMinutes.stream()
                .mapToLong(Long::longValue)
                .average()
                .orElse(0.0);
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫)
     */
    private Map<String, Long> calculateDailyActivity(List<FlightRecord> flights) {
        Map<String, Long> activity = new HashMap<>();
        activity.put("—É—Ç—Ä–æ", 0L);    // 06:00 - 11:59
        activity.put("–¥–µ–Ω—å", 0L);    // 12:00 - 17:59  
        activity.put("–≤–µ—á–µ—Ä", 0L);   // 18:00 - 23:59
        activity.put("–Ω–æ—á—å", 0L);    // 00:00 - 05:59
        
        for (FlightRecord flight : flights) {
            if (flight.getTakeoffTime() == null) {
                continue;
            }
            
            int hour = flight.getTakeoffTime().getHour();
            String timeOfDay;
            
            if (hour >= 6 && hour < 12) {
                timeOfDay = "—É—Ç—Ä–æ";
            } else if (hour >= 12 && hour < 18) {
                timeOfDay = "–¥–µ–Ω—å";
            } else if (hour >= 18 && hour < 24) {
                timeOfDay = "–≤–µ—á–µ—Ä";
            } else {
                timeOfDay = "–Ω–æ—á—å";
            }
            
            activity.put(timeOfDay, activity.get(timeOfDay) + 1);
        }
        
        return activity;
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –±–µ–∑ –ø–æ–ª–µ—Ç–æ–≤ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∞)
     */
    private Long calculateZeroDays(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        if (flights.isEmpty()) {
            return 0L;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å –ø–æ–ª–µ—Ç–∞–º–∏
        Set<LocalDate> daysWithFlights = flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .map(FlightRecord::getFlightDate)
                .collect(Collectors.toSet());
        
        if (daysWithFlights.isEmpty()) {
            return 0L;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞
        LocalDate minDate = startDate != null ? startDate : daysWithFlights.stream()
                .min(LocalDate::compareTo)
                .orElse(LocalDate.now());
        LocalDate maxDate = endDate != null ? endDate : daysWithFlights.stream()
                .max(LocalDate::compareTo)
                .orElse(LocalDate.now());
        
        // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –¥–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        long totalDays = java.time.temporal.ChronoUnit.DAYS.between(minDate, maxDate) + 1;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–∑ –ø–æ–ª–µ—Ç–æ–≤ = –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π - –¥–Ω–∏ —Å –ø–æ–ª–µ—Ç–∞–º–∏
        return totalDays - daysWithFlights.size();
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
     */
    private Map<String, Object> calculateAverageDailyFlights(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        Map<String, Object> stats = new HashMap<>();
        
        if (flights.isEmpty()) {
            stats.put("averageFlightsPerDay", 0.0);
            stats.put("daysWithFlights", 0);
            stats.put("totalDaysInPeriod", 0);
            return stats;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å –ø–æ–ª–µ—Ç–∞–º–∏
        Set<LocalDate> daysWithFlights = flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .map(FlightRecord::getFlightDate)
                .collect(Collectors.toSet());
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
        long totalDaysInPeriod;
        if (startDate != null && endDate != null) {
            totalDaysInPeriod = java.time.temporal.ChronoUnit.DAYS.between(startDate, endDate) + 1;
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ–ª–µ—Ç–æ–≤
            LocalDate minDate = daysWithFlights.stream().min(LocalDate::compareTo).orElse(LocalDate.now());
            LocalDate maxDate = daysWithFlights.stream().max(LocalDate::compareTo).orElse(LocalDate.now());
            totalDaysInPeriod = java.time.temporal.ChronoUnit.DAYS.between(minDate, maxDate) + 1;
        }
        
        double averageFlightsPerDay = (double) flights.size() / totalDaysInPeriod;
        
        stats.put("averageFlightsPerDay", Math.round(averageFlightsPerDay * 100.0) / 100.0);
        stats.put("daysWithFlights", daysWithFlights.size());
        stats.put("totalDaysInPeriod", totalDaysInPeriod);
        
        return stats;
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞-–ø–∞–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–µ –¥–∞—Ç—ã)
     */
    private Map<String, Object> calculateGrowthDecline(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        Map<String, Object> stats = new HashMap<>();
        
        // –†–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–µ –¥–∞—Ç—ã
        if (startDate == null || endDate == null) {
            return stats; // –ü—É—Å—Ç–æ–π Map
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞)
        long monthsBetween = java.time.temporal.ChronoUnit.MONTHS.between(
            startDate.withDayOfMonth(1), 
            endDate.withDayOfMonth(1)
        );
        
        if (monthsBetween < 1) {
            return stats; // –ü–µ—Ä–∏–æ–¥ –º–µ–Ω—å—à–µ 2 –º–µ—Å—è—Ü–µ–≤ - –Ω–µ —Å—á–∏—Ç–∞–µ–º
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–µ—Ä–∏–æ–¥–∞
        YearMonth firstMonth = YearMonth.from(startDate);
        YearMonth lastMonth = YearMonth.from(endDate);
        
        // –°—á–∏—Ç–∞–µ–º –ø–æ–ª–µ—Ç—ã –≤ –ø–µ—Ä–≤–æ–º –º–µ—Å—è—Ü–µ
        long firstMonthFlights = flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .filter(flight -> {
                    YearMonth flightMonth = YearMonth.from(flight.getFlightDate());
                    return flightMonth.equals(firstMonth);
                })
                .count();
        
        // –°—á–∏—Ç–∞–µ–º –ø–æ–ª–µ—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—è—Ü–µ
        long lastMonthFlights = flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .filter(flight -> {
                    YearMonth flightMonth = YearMonth.from(flight.getFlightDate());
                    return flightMonth.equals(lastMonth);
                })
                .count();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        double changePercentage = 0.0;
        String trend = "stable";
        
        if (firstMonthFlights > 0) {
            changePercentage = ((double) (lastMonthFlights - firstMonthFlights) / firstMonthFlights) * 100;
            trend = changePercentage > 0 ? "growth" : (changePercentage < 0 ? "decline" : "stable");
        } else if (lastMonthFlights > 0) {
            changePercentage = 100.0; // –†–æ—Å—Ç —Å 0
            trend = "growth";
        }
        
        stats.put("firstMonth", firstMonth.toString());
        stats.put("lastMonth", lastMonth.toString());
        stats.put("firstMonthFlights", firstMonthFlights);
        stats.put("lastMonthFlights", lastMonthFlights);
        stats.put("changePercentage", Math.round(changePercentage * 100.0) / 100.0);
        stats.put("trend", trend);
        stats.put("monthsBetween", monthsBetween + 1);
        
        return stats;
    }
    
    /**
     * üÜï –ú–ï–¢–û–î: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
     */
    private String getPeriodDescription(LocalDate startDate, LocalDate endDate) {
        if (startDate == null && endDate == null) {
            return "–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥";
        } else if (startDate != null && endDate != null) {
            return String.format("–° %s –ø–æ %s", startDate, endDate);
        } else if (startDate != null) {
            return String.format("–° %s", startDate);
        } else {
            return String.format("–ü–æ %s", endDate);
        }
    }
    
    /**
     * üìå –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private List<Map<String, Object>> getDemoRegions() {
        List<Map<String, Object>> demoRegions = new ArrayList<>();
        
        String[][] demoData = {
            {"1", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-MOS"},
            {"2", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ì–æ—Ä–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "RU-SPE"},
            {"3", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "–ö—Ä–∞–π", "RU-KDA"},
            {"4", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", "–†–µ—Å–ø—É–±–ª–∏–∫–∞", "RU-TA"},
            {"5", "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-SVE"}
        };
        
        for (String[] data : demoData) {
            Map<String, Object> region = new HashMap<>();
            region.put("id", Long.parseLong(data[0]));
            region.put("name", data[1]);
            region.put("regionType", data[2]);
            region.put("isoCode", data[3]);
            demoRegions.add(region);
        }
        
        return demoRegions;
    }
}