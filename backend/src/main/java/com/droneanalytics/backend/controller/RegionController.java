package com.droneanalytics.backend.controller;

import com.droneanalytics.backend.dto.FlightWithRegionDto;
import com.droneanalytics.backend.entity.FlightRecord;
import com.droneanalytics.backend.entity.RussianRegion;
import com.droneanalytics.backend.service.FlightService;
import com.droneanalytics.backend.service.RegionMappingService;
import com.droneanalytics.backend.service.RegionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/regions")
@CrossOrigin(origins = "http://localhost:3000")
public class RegionController {
    
    @Autowired
    private RegionService regionService;
    
    @Autowired
    private FlightService flightService;
    
    @Autowired 
    private RegionMappingService regionMappingService;
    
    /**
     * üìå GET /api/regions - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping
    public ResponseEntity<List<Map<String, Object>>> getAllRegions() {
        try {
            List<RussianRegion> regions = regionService.getAllRegions();
            
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            List<Map<String, Object>> result = new ArrayList<>();
            
            for (RussianRegion region : regions) {
                Map<String, Object> regionData = new HashMap<>();
                regionData.put("id", region.getGid());
                regionData.put("name", region.getName());
                regionData.put("regionType", region.getRegionType());
                regionData.put("isoCode", region.getIsoCode());
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º geom - –æ–Ω —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –¥–ª—è JSON
                
                result.add(regionData);
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –î–ï–ú–û-–î–ê–ù–ù–´–ï –ï–°–õ–ò –û–®–ò–ë–ö–ê
            return ResponseEntity.ok(getDemoRegions());
        }
    }
    
    /**
     * üìå GET /api/regions/{id} - –†–ï–ì–ò–û–ù –ü–û ID –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getRegionById(@PathVariable Long id) {
        Optional<RussianRegion> region = regionService.getRegionById(id);
        
        if (region.isPresent()) {
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            Map<String, Object> regionData = new HashMap<>();
            RussianRegion r = region.get();
            
            regionData.put("id", r.getGid());
            regionData.put("name", r.getName());
            regionData.put("regionType", r.getRegionType());
            regionData.put("isoCode", r.getIsoCode());
            // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º geom!
            
            return ResponseEntity.ok(regionData);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * üìå GET /api/regions/name/{name} - –†–ï–ì–ò–û–ù –ü–û –ù–ê–ó–í–ê–ù–ò–Æ –ë–ï–ó –ì–ï–û–î–ê–ù–ù–´–•
     */
    @GetMapping("/name/{name}")
    public ResponseEntity<Map<String, Object>> getRegionByName(@PathVariable String name) {
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        
        if (region.isPresent()) {
            // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ü–†–û–°–¢–û–ô JSON –ë–ï–ó –ì–ï–û–ú–ï–¢–†–ò–ò
            Map<String, Object> regionData = new HashMap<>();
            RussianRegion r = region.get();
            
            regionData.put("id", r.getGid());
            regionData.put("name", r.getName());
            regionData.put("regionType", r.getRegionType());
            regionData.put("isoCode", r.getIsoCode());
            
            return ResponseEntity.ok(regionData);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * üìå GET /api/regions/{id}/flights
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ ID —Ä–µ–≥–∏–æ–Ω–∞ (—á–µ—Ä–µ–∑ center_code –º–∞–ø–ø–∏–Ω–≥)
     */
    @GetMapping("/{id}/flights")
    public ResponseEntity<List<FlightWithRegionDto>> getFlightsByRegionId(@PathVariable Long id) {
        // –ù–∞–π—Ç–∏ –≤—Å–µ center_code, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É region_id
        List<String> centerCodesForRegion = regionMappingService.getCenterCodesByRegionId(id);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —ç—Ç–∏–º center_code
        List<FlightRecord> flights = new ArrayList<>();
        for (String centerCode : centerCodesForRegion) {
            flights.addAll(flightService.getFlightsByCenterCode(centerCode));
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DTO
        List<FlightWithRegionDto> flightDtos = flights.stream()
            .map(flight -> new FlightWithRegionDto(flight, regionMappingService))
            .collect(Collectors.toList());
        
        return ResponseEntity.ok(flightDtos);
    }
    
    /**
     * üìå GET /api/regions/name/{name}/flights  
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞ (—á–µ—Ä–µ–∑ region_takeoff)
     */
    /*@GetMapping("/name/{name}/flights")
    public ResponseEntity<List<FlightWithRegionDto>> getFlightsByRegionName(@PathVariable String name) {
        // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–æ–ª–µ—Ç–∞—Ö
        String flightRegionName = regionMappingService.getFlightRegionName(name);
        
        if (flightRegionName == null) {
            return ResponseEntity.notFound().build();
        }
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞
        List<FlightRecord> flights = flightService.getFlightsByRegion(flightRegionName);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DTO
        List<FlightWithRegionDto> flightDtos = flights.stream()
            .map(flight -> new FlightWithRegionDto(flight, regionMappingService))
            .collect(Collectors.toList());
        
        return ResponseEntity.ok(flightDtos);
    }*/
    
    /**
     * üìå GET /api/regions/{id}/stats
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –ø–æ ID —Ä–µ–≥–∏–æ–Ω–∞
     */
    @GetMapping("/{id}/stats")
    public ResponseEntity<Map<String, Object>> getRegionStats(@PathVariable Long id) {
        // –ù–∞–π—Ç–∏ –≤—Å–µ center_code, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É region_id
        List<String> centerCodesForRegion = regionMappingService.getCenterCodesByRegionId(id);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —ç—Ç–∏–º center_code
        List<FlightRecord> flights = new ArrayList<>();
        for (String centerCode : centerCodesForRegion) {
            flights.addAll(flightService.getFlightsByCenterCode(centerCode));
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Long totalFlights = (long) flights.size();
        Long uniqueOperators = flights.stream()
                .map(FlightRecord::getOperatorName)
                .filter(operator -> operator != null && !operator.isEmpty())
                .distinct()
                .count();
        
        Double averageDuration = flights.stream()
                .filter(flight -> flight.getFlightDurationMinutes() != null)
                .mapToInt(FlightRecord::getFlightDurationMinutes)
                .average()
                .orElse(0.0);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        Map<String, Long> flightsByOperator = flights.stream()
                .filter(flight -> flight.getOperatorName() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getOperatorName,
                    Collectors.counting()
                ));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤
        Map<String, Long> flightsByAircraftType = flights.stream()
                .filter(flight -> flight.getAircraftType() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getAircraftType,
                    Collectors.counting()
                ));
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        Map<String, Object> stats = new HashMap<>();
        stats.put("regionId", id);
        stats.put("totalFlights", totalFlights);
        stats.put("uniqueOperators", uniqueOperators);
        stats.put("averageFlightDuration", averageDuration);
        stats.put("centerCodes", centerCodesForRegion);
        stats.put("flightsByOperator", flightsByOperator);
        stats.put("flightsByAircraftType", flightsByAircraftType);
        
        return ResponseEntity.ok(stats);
    }
    
    /**
     * üìå GET /api/regions/name/{name}/stats
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞
     */
    @GetMapping("/name/{name}/stats")
    public ResponseEntity<Map<String, Object>> getRegionStatsByName(@PathVariable String name) {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        Optional<RussianRegion> region = regionService.getRegionByName(name);
        if (region.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å ID —Ä–µ–≥–∏–æ–Ω–∞
        Long regionId = region.get().getGid();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ ID
        return getRegionStats(regionId);
    }
    
    /**
     * üìå –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private List<Map<String, Object>> getDemoRegions() {
        List<Map<String, Object>> demoRegions = new ArrayList<>();
        
        String[][] demoData = {
            {"1", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-MOS"},
            {"2", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ì–æ—Ä–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "RU-SPE"},
            {"3", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "–ö—Ä–∞–π", "RU-KDA"},
            {"4", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", "–†–µ—Å–ø—É–±–ª–∏–∫–∞", "RU-TA"},
            {"5", "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–±–ª–∞—Å—Ç—å", "RU-SVE"}
        };
        
        for (String[] data : demoData) {
            Map<String, Object> region = new HashMap<>();
            region.put("id", Long.parseLong(data[0]));
            region.put("name", data[1]);
            region.put("regionType", data[2]);
            region.put("isoCode", data[3]);
            demoRegions.add(region);
        }
        
        return demoRegions;
    }
}