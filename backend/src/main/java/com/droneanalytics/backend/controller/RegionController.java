package com.droneanalytics.backend.controller;

import com.droneanalytics.backend.entity.FlightRecord;
import com.droneanalytics.backend.service.FlightService;
import com.droneanalytics.backend.service.RegionMappingService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Objects;

@RestController
@RequestMapping("/api/regions")
@CrossOrigin(origins = "http://localhost:5173")
@Tag(name = "–†–µ–≥–∏–æ–Ω—ã", description = "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª–µ—Ç–æ–≤")
@SecurityRequirement(name = "bearerAuth")
public class RegionController {

    @Autowired
    private FlightService flightService;

    @Autowired
    private RegionMappingService regionMappingService;

    // ... –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã ...

    /**
     * üìå GET /api/regions/{id}/stats
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –ø–æ ID —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"),
        @ApiResponse(responseCode = "401", description = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "403", description = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"),
        @ApiResponse(responseCode = "404", description = "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    })
    @GetMapping("/{id}/stats")
    @PreAuthorize("hasAnyRole('ADMIN', 'ANALYST')")
    public ResponseEntity<Map<String, Object>> getRegionStats(
            @Parameter(description = "ID —Ä–µ–≥–∏–æ–Ω–∞", example = "1") 
            @PathVariable Long id,
            
            @Parameter(description = "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)", example = "2024-01-01") 
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            
            @Parameter(description = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)", example = "2024-12-31") 
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        
        // –ù–∞–π—Ç–∏ –≤—Å–µ center_code, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É region_id
        List<String> centerCodesForRegion = regionMappingService.getCenterCodesByRegionId(id);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —ç—Ç–∏–º center_code
        List<FlightRecord> allFlights = new ArrayList<>();
        for (String centerCode : centerCodesForRegion) {
            allFlights.addAll(flightService.getFlightsByCenterCode(centerCode));
        }
        
        // üìÖ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –î–ê–¢–ê–ú –ï–°–õ–ò –£–ö–ê–ó–ê–ù–´
        List<FlightRecord> flights = filterFlightsByDate(allFlights, startDate, endDate);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Long totalFlights = (long) flights.size();
        Long uniqueOperators = flights.stream()
                .map(FlightRecord::getOperatorName)
                .filter(operator -> operator != null && !operator.isEmpty())
                .distinct()
                .count();
        
        // üìä –ù–û–í–´–ô –†–ê–°–ß–ï–¢: —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ takeoff_time –∏ landing_time
        Double averageDuration = calculateAverageFlightDuration(flights);
        
        // üÜï –î–ù–ï–í–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        Map<String, Long> dailyActivity = calculateDailyActivity(flights);
        
        // üÜï –ù–£–õ–ï–í–´–ï –î–ù–ò: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–∑ –ø–æ–ª–µ—Ç–æ–≤
        Long zeroDays = calculateZeroDays(flights, startDate, endDate);
        
        // üÜï –°–†–ï–î–ù–ï–°–£–¢–û–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê: —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø–æ–ª–µ—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
        Map<String, Object> averageDailyStats = calculateAverageDailyFlights(flights, startDate, endDate);
        
        // üÜï –†–û–°–¢-–ü–ê–î–ï–ù–ò–ï: –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–µ –¥–∞—Ç—ã)
        Map<String, Object> growthDeclineStats = calculateGrowthDecline(flights, startDate, endDate);
        
        // üÜï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ì–û–î–ê–ú: –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        Map<String, Object> yearlyStats = calculateYearlyDistribution(flights);
        Map<Integer, Long> yearlyDistribution = (Map<Integer, Long>) yearlyStats.get("yearlyDistribution");
        Map<String, Object> mostActiveYear = (Map<String, Object>) yearlyStats.get("mostActiveYear");
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        Map<String, Long> flightsByOperator = flights.stream()
                .filter(flight -> flight.getOperatorName() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getOperatorName,
                    Collectors.counting()
                ));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤
        Map<String, Long> flightsByAircraftType = flights.stream()
                .filter(flight -> flight.getAircraftType() != null)
                .collect(Collectors.groupingBy(
                    FlightRecord::getAircraftType,
                    Collectors.counting()
                ));
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        Map<String, Object> stats = new HashMap<>();
        stats.put("regionId", id);
        stats.put("totalFlights", totalFlights);
        stats.put("uniqueOperators", uniqueOperators);
        stats.put("averageFlightDuration", averageDuration);
        stats.put("dailyActivity", dailyActivity);
        stats.put("zeroDays", zeroDays);
        stats.put("averageDailyFlights", averageDailyStats);
        stats.put("yearlyDistribution", yearlyDistribution); // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ì–û–î–ê–ú
        stats.put("mostActiveYear", mostActiveYear); // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –°–ê–ú–´–ô –ê–ö–¢–ò–í–ù–´–ô –ì–û–î
        if (!growthDeclineStats.isEmpty()) {
            stats.put("growthDecline", growthDeclineStats);
        }
        stats.put("centerCodes", centerCodesForRegion);
        stats.put("flightsByOperator", flightsByOperator);
        stats.put("flightsByAircraftType", flightsByAircraftType);
        
        // üìÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–ï–†–ò–û–î–ï
        if (startDate != null) {
            stats.put("startDate", startDate.toString());
        }
        if (endDate != null) {
            stats.put("endDate", endDate.toString());
        }
        stats.put("periodDescription", getPeriodDescription(startDate, endDate));
        
        return ResponseEntity.ok(stats);
    }

    /**
     * üÜï –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –≥–æ–¥–∞–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–¥–∞
     */
    private Map<String, Object> calculateYearlyDistribution(List<FlightRecord> flights) {
        Map<Integer, Long> yearlyStats = new HashMap<>();
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–¥–∞–º
        for (FlightRecord flight : flights) {
            if (flight.getFlightDate() != null) {
                int year = flight.getFlightDate().getYear();
                yearlyStats.put(year, yearlyStats.getOrDefault(year, 0L) + 1);
            }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≥–æ–¥
        Map.Entry<Integer, Long> mostActive = yearlyStats.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .orElse(null);
        
        Map<String, Object> result = new HashMap<>();
        result.put("yearlyDistribution", yearlyStats);
        
        if (mostActive != null) {
            Map<String, Object> mostActiveYear = new HashMap<>();
            mostActiveYear.put("year", mostActive.getKey());
            mostActiveYear.put("flightsCount", mostActive.getValue());
            result.put("mostActiveYear", mostActiveYear);
        }
        
        return result;
    }

    /**
     * üìå –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –±–µ–∑ –ø–æ–ª–µ—Ç–æ–≤
     */
    private Long calculateZeroDays(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        if (startDate == null || endDate == null) {
            return 0L;
        }
        
        Set<LocalDate> daysWithFlights = flights.stream()
                .map(FlightRecord::getFlightDate)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
        
        long totalDays = startDate.until(endDate).getDays() + 1;
        long daysWithFlightsCount = daysWithFlights.size();
        
        return totalDays - daysWithFlightsCount;
    }

    /**
     * üìå –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private Map<String, Object> calculateAverageDailyFlights(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        Map<String, Object> stats = new HashMap<>();
        
        if (startDate == null || endDate == null) {
            stats.put("daysWithFlights", 0);
            stats.put("averageFlightsPerDay", 0.0);
            stats.put("totalDaysInPeriod", 0);
            return stats;
        }
        
        Set<LocalDate> daysWithFlights = flights.stream()
                .map(FlightRecord::getFlightDate)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
        
        long totalDays = startDate.until(endDate).getDays() + 1;
        long daysWithFlightsCount = daysWithFlights.size();
        double averageFlightsPerDay = daysWithFlightsCount > 0 ? (double) flights.size() / daysWithFlightsCount : 0.0;
        
        stats.put("daysWithFlights", (int) daysWithFlightsCount);
        stats.put("averageFlightsPerDay", Math.round(averageFlightsPerDay * 100.0) / 100.0);
        stats.put("totalDaysInPeriod", (int) totalDays);
        
        return stats;
    }

    /**
     * üìå –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    private Map<String, Object> calculateGrowthDecline(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        Map<String, Object> stats = new HashMap<>();
        
        if (startDate == null || endDate == null || flights.isEmpty()) {
            return stats;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª–µ—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
        Map<String, Long> flightsByMonth = flights.stream()
                .filter(flight -> flight.getFlightDate() != null)
                .collect(Collectors.groupingBy(
                    flight -> flight.getFlightDate().getYear() + "-" + 
                             String.format("%02d", flight.getFlightDate().getMonthValue()),
                    Collectors.counting()
                ));
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        List<String> months = new ArrayList<>(flightsByMonth.keySet());
        if (months.size() < 2) {
            return stats;
        }
        
        Collections.sort(months);
        String firstMonth = months.get(0);
        String lastMonth = months.get(months.size() - 1);
        
        Long firstMonthFlights = flightsByMonth.get(firstMonth);
        Long lastMonthFlights = flightsByMonth.get(lastMonth);
        
        double changePercentage = 0.0;
        String trend = "stable";
        
        if (firstMonthFlights != null && lastMonthFlights != null && firstMonthFlights > 0) {
            changePercentage = ((lastMonthFlights - firstMonthFlights) / (double) firstMonthFlights) * 100;
            trend = changePercentage > 0 ? "growth" : (changePercentage < 0 ? "decline" : "stable");
        }
        
        stats.put("firstMonthFlights", firstMonthFlights != null ? firstMonthFlights : 0);
        stats.put("lastMonthFlights", lastMonthFlights != null ? lastMonthFlights : 0);
        stats.put("trend", trend);
        stats.put("firstMonth", firstMonth);
        stats.put("lastMonth", lastMonth);
        stats.put("monthsBetween", months.size());
        stats.put("changePercentage", Math.round(changePercentage * 100.0) / 100.0);
        
        return stats;
    }
    
    private List<FlightRecord> filterFlightsByDate(List<FlightRecord> flights, LocalDate startDate, LocalDate endDate) {
        if (startDate == null && endDate == null) {
            return flights;
        }
        
        return flights.stream()
                .filter(flight -> {
                    if (flight.getFlightDate() == null) return false;
                    if (startDate != null && flight.getFlightDate().isBefore(startDate)) return false;
                    if (endDate != null && flight.getFlightDate().isAfter(endDate)) return false;
                    return true;
                })
                .collect(Collectors.toList());
    }
    
    private Double calculateAverageFlightDuration(List<FlightRecord> flights) {
        return flights.stream()
                .filter(f -> f.getFlightDurationMinutes() != null)
                .mapToInt(FlightRecord::getFlightDurationMinutes)
                .average()
                .orElse(0.0);
    }
    
    private Map<String, Long> calculateDailyActivity(List<FlightRecord> flights) {
        Map<String, Long> activity = new HashMap<>();
        activity.put("morning", 0L);
        activity.put("day", 0L);
        activity.put("evening", 0L);
        activity.put("night", 0L);
        
        for (FlightRecord flight : flights) {
            if (flight.getTakeoffTime() != null) {
                int hour = flight.getTakeoffTime().getHour();
                if (hour >= 6 && hour < 12) {
                    activity.put("morning", activity.get("morning") + 1);
                } else if (hour >= 12 && hour < 18) {
                    activity.put("day", activity.get("day") + 1);
                } else if (hour >= 18 && hour < 24) {
                    activity.put("evening", activity.get("evening") + 1);
                } else {
                    activity.put("night", activity.get("night") + 1);
                }
            }
        }
        
        return activity;
    }
    
    private String getPeriodDescription(LocalDate startDate, LocalDate endDate) {
        if (startDate == null && endDate == null) {
            return "–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥";
        } else if (startDate != null && endDate != null) {
            return String.format("–° %s –ø–æ %s", startDate, endDate);
        } else if (startDate != null) {
            return String.format("–° %s", startDate);
        } else {
            return String.format("–ü–æ %s", endDate);
        }
    }
}