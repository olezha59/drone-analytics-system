package com.droneanalytics.backend.repository;

import com.droneanalytics.backend.entity.FlightRecord;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@Repository
public interface FlightRecordRepository extends JpaRepository<FlightRecord, UUID> {
    
    // ========================
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´ –ü–û –ò–ú–ï–ù–ò –ú–ï–¢–û–î–ê
    // ========================
    
    /**
     * üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: 
     * SELECT * FROM flight_records WHERE center_code = ?
     */
    List<FlightRecord> findByCenterCode(String centerCode);
    
    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: SELECT * FROM flight_records WHERE operator_name = ?
     */
    List<FlightRecord> findByOperatorName(String operatorName);
    
    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ –¥–∞—Ç–µ
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: SELECT * FROM flight_records WHERE flight_date = ?
     */
    List<FlightRecord> findByFlightDate(LocalDate flightDate);
    
    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: SELECT * FROM flight_records WHERE flight_date BETWEEN ? AND ?
     */
    List<FlightRecord> findByFlightDateBetween(LocalDate startDate, LocalDate endDate);
    
    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —Ç–∏–ø—É –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: SELECT * FROM flight_records WHERE aircraft_type = ?
     */
    List<FlightRecord> findByAircraftType(String aircraftType);
    
    /**
     * üìå –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–µ—Ç—ã –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç: SELECT COUNT(*) FROM flight_records WHERE operator_name = ?
     */
    Long countByOperatorName(String operatorName);
    
    // ========================
    // –°–õ–û–ñ–ù–´–ï –ó–ê–ü–†–û–°–´ –ß–ï–†–ï–ó @Query
    // ========================
    
    /**
     * üìå –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
     * JPQL –∑–∞–ø—Ä–æ—Å (Java Persistence Query Language)
     */
    @Query("SELECT COUNT(f) FROM FlightRecord f WHERE f.flightDate BETWEEN :start AND :end")
    Long countFlightsInPeriod(@Param("start") LocalDate start, @Param("end") LocalDate end);
    
    /**
     * üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º + –ø–æ–¥—Å—á–µ—Ç
     */
    @Query("SELECT f.operatorName, COUNT(f) FROM FlightRecord f " +
           "WHERE f.flightDate BETWEEN :start AND :end " +
           "GROUP BY f.operatorName " +
           "ORDER BY COUNT(f) DESC")
    List<Object[]> getOperatorStats(@Param("start") LocalDate start, @Param("end") LocalDate end);
    
    /**
     * üìå –ù–∞–π—Ç–∏ —Ç–æ–ø-N —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
     */
    @Query("SELECT f.flightDate, COUNT(f) as flightCount FROM FlightRecord f " +
           "GROUP BY f.flightDate " +
           "ORDER BY flightCount DESC " +
           "LIMIT :limit")
    List<Object[]> findTopActiveDays(@Param("limit") int limit);
    
    /**
     * üìå –ù–∞–π—Ç–∏ –ø–æ–ª–µ—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω—É –≤–∑–ª–µ—Ç–∞
     */
    List<FlightRecord> findByRegionTakeoff(String regionName);
    
    /**
     * üìå –ù–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    @Query("SELECT DISTINCT f.operatorName FROM FlightRecord f ORDER BY f.operatorName")
    List<String> findDistinctOperators();
    
    /**
     * üìå –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
     */
    @Query("SELECT f.operatorName, AVG(f.flightDurationMinutes) FROM FlightRecord f " +
           "GROUP BY f.operatorName " +
           "HAVING AVG(f.flightDurationMinutes) IS NOT NULL")
    List<Object[]> findAverageDurationByOperator();

    @Query("SELECT COUNT(DISTINCT f.operatorName) FROM FlightRecord f")
    Long countDistinctOperators();
}