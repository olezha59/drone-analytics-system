package com.droneanalytics.backend.service;

import com.droneanalytics.backend.dto.RegionAnalyticsDto;
import com.droneanalytics.backend.dto.RegionStatsDto;
import com.droneanalytics.backend.entity.FlightRecord;
import com.droneanalytics.backend.entity.RussianRegion;
import com.droneanalytics.backend.repository.FlightRecordRepository;
import com.droneanalytics.backend.repository.RussianRegionRepository;
import org.locationtech.jts.geom.Point;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class AnalyticsService {

    @Autowired
    private FlightRecordRepository flightRecordRepository;

    @Autowired
    private RussianRegionRepository regionRepository;

    // ========================
    // –û–°–ù–û–í–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú
    // ========================

    /**
     * üìå –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
     */
    public RegionAnalyticsDto getRegionAnalytics(LocalDate start, LocalDate end) {
        
        // 1. üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        Long totalFlights = flightRecordRepository.countFlightsInPeriod(start, end);
        Long uniqueOperators = countUniqueOperatorsInPeriod(start, end);
        Double averageDuration = calculateAverageDurationInPeriod(start, end);

        // 2. üó∫Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú (–¢–û–ü-10)
        List<RegionStatsDto> topRegions = getTopRegionsStats(start, end, 10);

        // 3. üìÖ –ü–û–õ–ï–¢–´ –ü–û –î–ù–Ø–ú (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
        Map<String, Long> flightsByDate = getFlightsByDate(start, end);

        // 4. üèóÔ∏è –§–û–†–ú–ò–†–£–ï–ú –û–¢–í–ï–¢
        return new RegionAnalyticsDto(
            totalFlights,
            uniqueOperators,
            averageDuration,
            topRegions,
            flightsByDate
        );
    }

    /**
     * üìå –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    private Long countUniqueOperatorsInPeriod(LocalDate start, LocalDate end) {
        List<FlightRecord> flights = flightRecordRepository.findByFlightDateBetween(start, end);
        return flights.stream()
                     .map(FlightRecord::getOperatorName)
                     .distinct()
                     .count();
    }

    /**
     * üìå –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤
     */
    private Double calculateAverageDurationInPeriod(LocalDate start, LocalDate end) {
        List<FlightRecord> flights = flightRecordRepository.findByFlightDateBetween(start, end);
        return flights.stream()
                     .filter(f -> f.getFlightDurationMinutes() != null)
                     .mapToInt(FlightRecord::getFlightDurationMinutes)
                     .average()
                     .orElse(0.0);
    }

    /**
     * üìå –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ—Ç–æ–≤
     */
    private List<RegionStatsDto> getTopRegionsStats(LocalDate start, LocalDate end, int limit) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        
        List<RegionStatsDto> regionStats = new ArrayList<>();
        
        // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
        regionStats.add(new RegionStatsDto("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 234L, 25L, 130.5));
        regionStats.add(new RegionStatsDto("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 189L, 18L, 115.2));
        regionStats.add(new RegionStatsDto("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", 156L, 12L, 95.7));
        
        return regionStats.stream()
                         .limit(limit)
                         .collect(Collectors.toList());
    }

    /**
     * üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º
     */
    private Map<String, Long> getFlightsByDate(LocalDate start, LocalDate end) {
        Map<String, Long> dailyStats = new HashMap<>();
        
        // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
        dailyStats.put("2024-01-01", 45L);
        dailyStats.put("2024-01-02", 52L);
        dailyStats.put("2024-01-03", 38L);
        
        return dailyStats;
    }

    // ========================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò
    // ========================

    /**
     * üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
     */
    public List<Map<String, Object>> getOperatorStats(LocalDate start, LocalDate end) {
        List<Map<String, Object>> stats = new ArrayList<>();
        
        // –ü—Ä–∏–º–µ—Ä: –æ–ø–µ—Ä–∞—Ç–æ—Ä -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤
        Map<String, Object> stat1 = new HashMap<>();
        stat1.put("operatorName", "–ê—ç—Ä–æ—Å–∫–∞–Ω");
        stat1.put("flightCount", 156L);
        stat1.put("averageDuration", 125.5);
        
        Map<String, Object> stat2 = new HashMap<>();
        stat2.put("operatorName", "–ì–µ–æ—Å–∫–∞–Ω");
        stat2.put("flightCount", 89L);
        stat2.put("averageDuration", 95.2);
        
        stats.add(stat1);
        stats.add(stat2);
        
        return stats;
    }

    /**
     * üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤
     */
    public List<Map<String, Object>> getAircraftTypeStats() {
        List<Map<String, Object>> stats = new ArrayList<>();
        
        // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        Map<String, Object> stat1 = new HashMap<>();
        stat1.put("aircraftType", "DJI Phantom 4");
        stat1.put("flightCount", 245L);
        
        Map<String, Object> stat2 = new HashMap<>();
        stat2.put("aircraftType", "DJI Mavic 3");
        stat2.put("flightCount", 189L);
        
        stats.add(stat1);
        stats.add(stat2);
        
        return stats;
    }

    /**
     * üìå –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    public Map<String, Object> getSystemSummary() {
        Map<String, Object> summary = new HashMap<>();
        
        Long totalFlights = flightRecordRepository.count();
        Long totalOperators = flightRecordRepository.countDistinctOperators();
        Long totalRegions = regionRepository.count();
        
        summary.put("totalFlights", totalFlights);
        summary.put("totalOperators", totalOperators);
        summary.put("totalRegions", totalRegions);
        summary.put("dataLastUpdated", LocalDate.now().toString());
        
        return summary;
    }

    /**
     * üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º
     */
    public Map<String, Long> getDailyFlightStats(LocalDate start, LocalDate end) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        
        Map<String, Long> dailyStats = new HashMap<>();
        LocalDate current = start;
        
        while (!current.isAfter(end)) {
            dailyStats.put(current.toString(), (long) (Math.random() * 100));
            current = current.plusDays(1);
        }
        
        return dailyStats;
    }

    /**
     * üìå –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    public List<Map<String, Object>> getTopRegions(int limit) {
        List<Map<String, Object>> topRegions = new ArrayList<>();
        
        // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        Map<String, Object> region1 = new HashMap<>();
        region1.put("regionName", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å");
        region1.put("flightCount", 234L);
        region1.put("operatorCount", 25L);
        
        Map<String, Object> region2 = new HashMap<>();
        region2.put("regionName", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥");
        region2.put("flightCount", 189L);
        region2.put("operatorCount", 18L);
        
        topRegions.add(region1);
        topRegions.add(region2);
        
        return topRegions.stream().limit(limit).collect(Collectors.toList());
    }
}
